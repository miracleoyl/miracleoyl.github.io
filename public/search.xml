<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Concepts - SonarQube in Successfactors</title>
      <link href="/2020/01/03/SonarQube-in-SFSF/"/>
      <url>/2020/01/03/SonarQube-in-SFSF/</url>
      
        <content type="html"><![CDATA[<div class="md-content"><p>Generally you could go through concepts from official User guide: <a href="https://docs.sonarqube.org/latest/user-guide/concepts/" target="_blank" rel="noopener">https://docs.sonarqube.org/latest/user-guide/concepts/</a>, also you could get a few important items as following.</p><h2 id="static-code-analysis">Static Code Analysis<a class="headerlink" href="https://github.wdf.sap.corp/pages/Codehygiene/SF-SonarQube-UserGuide/concepts/#static-code-analysis" target="_blank" rel="noopener" title="Permanent link">¶</a></h2><p>Static code analysis is the process of detecting errors and defects in a software's source code.</p><p>CheckStyles, FindBugs are used as static code analysis tools for Java source code in SF BizX for a long time, which have been integrated into Gradle Build System.</p><p>Staring from the end of 2017, a few EPB(hot-fix) indicate that there are not only tech debt in the existing code base, but also the static code analysis reports generated by CheckStyles and FindBugs during development cycle are missed attention in the past few releases, finally we saw the following issues happened in Production:</p><div class="codehilite" id="__code_0"><button class="md-clipboard" title="Copy to clipboard" data-clipboard-target="#__code_0 pre, #__code_0 code"><span class="md-clipboard__message"></span></button><pre><span></span>1. DB Connection Leak2. Massive Null Pointer exception3. Security issues</pre></div><p>At that moment, Code Hygiene team and Development Produtivity team evaluated and then introduced SonarQube which could behave with reactive and proactive approach to help development team to handle static code issues effectively.</p><h2 id="quality-profile">Quality Profile<a class="headerlink" href="https://github.wdf.sap.corp/pages/Codehygiene/SF-SonarQube-UserGuide/concepts/#quality-profile" target="_blank" rel="noopener" title="Permanent link">¶</a></h2><p>Simply said it's a set of rules and Quality Profiles are defined for individual languages.</p><h2 id="issue-severity">Issue Severity<a class="headerlink" href="https://github.wdf.sap.corp/pages/Codehygiene/SF-SonarQube-UserGuide/concepts/#issue-severity" target="_blank" rel="noopener" title="Permanent link">¶</a></h2><p>Each issue has one of five severities:</p><ul><li><p><strong>BLOCKER</strong></p><p>Bug with a high probability to impact the behavior of the application in production: memory leak, unclosed JDBC connection, .... The code MUST be immediately fixed.</p></li><li><p><strong>CRITICAL</strong></p><p>Either a bug with a low probability to impact the behavior of the application in production or an issue which represents a security flaw: empty catch block, SQL injection, ... The code MUST be immediately reviewed.</p></li><li><p><strong>MAJOR</strong></p><p>Quality flaw which can highly impact the developer productivity: uncovered piece of code, duplicated blocks, unused parameters, ...</p></li><li><p><strong>MINOR</strong></p><p>Quality flaw which can slightly impact the developer productivity: lines should not be too long, "switch" statements should have at least 3 cases, ...</p></li><li><p><strong>INFO</strong></p><p>Neither a bug nor a quality flaw, just a finding.</p></li></ul><p>In Bizx, after a few rounds of review agaist the rules in the quality profile "sfbizx_level4", we upgarde severity to Blocker &amp; Critical for a few rules to ask developers to pay attention to.</p><h2 id="code-coverage">Code Coverage<a class="headerlink" href="https://github.wdf.sap.corp/pages/Codehygiene/SF-SonarQube-UserGuide/concepts/#code-coverage" target="_blank" rel="noopener" title="Permanent link">¶</a></h2><p>Code Coverage data is coming from "gradle test integrationTest" in BizX, then publish jacoco xml file to SonarQube, So developers actaully could reproduce the code coverage locally by calling gradle tasks:</p><ul><li><p><strong><em>showCodeCoverageModuleReport</em></strong></p><div class="codehilite" id="__code_1"><button class="md-clipboard" title="Copy to clipboard" data-clipboard-target="#__code_1 pre, #__code_1 code"><span class="md-clipboard__message"></span></button><pre><span></span>Opens the code coverage report in a browser</pre></div></li><li><p><strong><em>showCodeCoverageReport</em></strong></p><p>Opens the component code coverage report in a browser</p></li></ul><p>It is a mix of Line coverage and Condition coverage. Its goal is to provide an even more accurate answer to the following question: How much of the source code has been covered by the unit tests?</p><p>Coverage = (CT + CF + LC)/(2*B + EL)<br>Where</p><ul><li>CT = conditions that have been evaluated to 'true' at least once</li><li>CF = conditions that have been evaluated to 'false' at least once</li><li>LC = covered lines = linestocover - uncovered_lines</li><li>B = total number of conditions</li><li>EL = total number of executable lines (lines_to_cover)</li></ul><p>Example:</p><p><img alt="details of code coverage metric" src="/.com//code-coverage-example.png"></p><p>$$Overall Coverage: 70.6\% = (41879-14616+108213-29492)/(41879+108213) $$</p><h2 id="new-code-coverage">New Code Coverage<a class="headerlink" href="https://github.wdf.sap.corp/pages/Codehygiene/SF-SonarQube-UserGuide/concepts/#new-code-coverage" target="_blank" rel="noopener" title="Permanent link">¶</a></h2><p>Identical to Coverage but restricted to <strong>new / updated source code</strong>.</p><h2 id="quality-gate">Quality Gate<a class="headerlink" href="https://github.wdf.sap.corp/pages/Codehygiene/SF-SonarQube-UserGuide/concepts/#quality-gate" target="_blank" rel="noopener" title="Permanent link">¶</a></h2><p>A quality gate is the best way to enforce a quality policy in your organization, when setting up the quality gate, which condition is a combination of:</p><ul><li>measure</li><li>comparison operator</li><li>error value</li></ul><p>In BizX, we defined the following conditions:</p><div class="md-typeset__scrollwrap"><div class="md-typeset__table"><table><thead><tr><th>Measure</th><th>comparison operator</th><th>error value</th></tr></thead><tbody><tr><td>Coverage on New Code</td><td>is less than</td><td>50.0%</td></tr><tr><td>New Critical Issues</td><td>is greater  than</td><td>0</td></tr><tr><td>New Blocker Issues</td><td>is greater  than</td><td>0</td></tr></tbody></table></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NPS</title>
      <link href="/2020/01/02/NPS/"/>
      <url>/2020/01/02/NPS/</url>
      
        <content type="html"><![CDATA[<p>净推荐(Net Promoter score)是Fred Reichheld（2003）针对企业良性收益与真实增长所提出的用户忠诚度概念。请用户回答“您在多大程度上愿意向您的朋友（亲人、同事……）推荐XX公司/产品？”（0-10分，10分表示非常愿意，0分表示非常不愿意），根据用户的推荐意愿，将用户分为三类：推荐者、被动者、贬损者，推荐者与贬损者是对企业实际的产品口碑有影响的用户，这两部分用户在用户总数中所占百分比之差，就是净推荐值（Net Promoter Score，NPS）。</p><p>推荐者（Promoter）：具有狂热忠诚度，铁杆粉丝，反复光顾，向朋友推荐。<br>被动者（Passives）：总体满意但不忠诚，容易转向竞争对手。<br>贬损者（Detractors）：使用不满意不忠诚，不断抱怨或投诉。<br>净推荐值(NPS)=(推荐者数/总样本数)×100%－(贬损者数/总样本数)×100%</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

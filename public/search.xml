<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>scrumInCDP</title>
      <link href="/2020/01/07/scrumInCDP/"/>
      <url>/2020/01/07/scrumInCDP/</url>
      
        <content type="html"><![CDATA[<h1 id="CDP-scrum"><a href="#CDP-scrum" class="headerlink" title="CDP scrum"></a>CDP scrum</h1><h2 id="Team-Structure"><a href="#Team-Structure" class="headerlink" title="Team Structure"></a>Team Structure</h2><p>1 Enterprise manager<br>1 Product manager<br>1 Scrum master<br>9 team members<br>1 UA - provide message /texts<br>1 UX - provide mock-up</p><h2 id="Durtaion"><a href="#Durtaion" class="headerlink" title="Durtaion"></a>Durtaion</h2><p>3 months as a release<br>2 weeks as a development sprint. total 4 development sprints<br>1 month as release sprint</p><h2 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h2><h3 id="Backlog-refinement"><a href="#Backlog-refinement" class="headerlink" title="Backlog refinement"></a>Backlog refinement</h3><p>Happened before Development sprint started</p><ol><li>product manager get vision from top management team </li><li>Product manager create and prioritize production backlog list. JIRA tickets created as Epic.</li><li>Scrum master works with team members to do draft estimation</li><li>Scrum master identifies team capacity and negotiate with PM whic Epics can be done based on current capacity.</li><li>Product manager finalized the scope and work with scrum master to create stories for each epic.</li><li>Product manager or scrum master intial backlog refinement meeting within team and team member should understand each requirement for each story.<br>output for the meeting: </li></ol><p>-DOR (definition of readiness) criteria should meet. total 4:<br>    *Story Meets INVEST Criteria<br>    *Acceptance Criteria is Defined<br>    *Story is Prioritized for Sprint<br>    *Scrum team understands how to demonstrate the Story<br>-Stories are ready to be estimated within team.</p><h3 id="Sprint-Planning"><a href="#Sprint-Planning" class="headerlink" title="Sprint Planning"></a>Sprint Planning</h3><ol><li>Scrum master collect holidays /PTOs for each team member and finalize capacity planning</li><li>Product manager finalized Acceptance Tests for each story</li><li>Scrum master set up planning meeting<br>Output for the meeting:<br>Subtasks created for each story, including coding /Unit Testing/Automation testing/manunal Testing/UA (need UA team to provide messages if needed)/Security testing/Accessibilty/Performance etc<br>Estimation done (Man Day) for each subtask<br>Story finalized and committed</li></ol><h3 id="Daily-stand-up-meeting"><a href="#Daily-stand-up-meeting" class="headerlink" title="Daily stand-up meeting"></a>Daily stand-up meeting</h3><p>Meeting starts 11:00am every workday should be finished with 15 minutes.<br>Round table to share what has been done yesterday / any risk / any support needed.<br>Demo to team if story done and time may be extended to half an hour.<br>Scrum master will check <em>Burndown chart</em> each day before daily scrum.</p><h3 id="Sprint-Review"><a href="#Sprint-Review" class="headerlink" title="Sprint Review"></a>Sprint Review</h3><ol><li>Team member finish coding and testing for story and notify scrum master when ready to demo.</li><li>Scrum master notify all stake holders and extend daily meeting for the demo.</li><li>Story owner Demo to team and product manager will sign off the demo.</li></ol><h3 id="Story-sign-off-PSP-potentially-shippable-product"><a href="#Story-sign-off-PSP-potentially-shippable-product" class="headerlink" title="Story sign off -PSP (potentially shippable product)"></a>Story sign off -PSP (potentially shippable product)</h3><ol><li>Product manager review DOD (definition of done) criteria and sign off the story if all criteria meets. total 7:<br> *Architecture Overview accepted<br> *Static Code analysis done + Code Review completed<br> *Functional Tests completed<br> *Non-Functional Tests completed<br> *Zero Release Criteria (REM) defects for User Story<br> *Acceptance Criteria for User Story met<br> *Demo completed</li></ol><h3 id="Sprint-retropsective"><a href="#Sprint-retropsective" class="headerlink" title="Sprint retropsective"></a>Sprint retropsective</h3><ol><li>Scrum master set up retrospective meeting after all stories done. in the meeting, round table to share<br> Glad thing during scrum (what’s done well)<br> Bad thing during scrum (what’s not doing well)<br> Mad thing during scrum (blocking issue etc)<br>For things to be improved, we need to list the impact and take action items after the meeting.</li></ol><h2 id="working-model"><a href="#working-model" class="headerlink" title="working model"></a>working model</h2><p>Product manager: not to change requirement during dev sprint<br>Team member: complete and deliver high quality codes.</p><h2 id="5-scrum-values"><a href="#5-scrum-values" class="headerlink" title="5 scrum values"></a>5 scrum values</h2><p>Focus / Commitment / Respect / Courage / Openess</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>slate</title>
      <link href="/2020/01/03/slate/"/>
      <url>/2020/01/03/slate/</url>
      
        <content type="html"><![CDATA[<p>slate 配置简单、干净，直观的设计、上手快 。您使用Slate编写文档时，您只需编写Markdown，这使编辑和理解变得简单。一切都是用Markdown编写的 - 即使代码示例只是Markdown代码块。如果您的API具有多种编程语言的绑定，您可以轻松地在选项卡中切换它们。</p><p>默认情况下，您的Slate生成的文档托管在公共GitHub存储库中。这不仅意味着您可以通过GitHub页面免费托管您的文档，而且还可以让其他开发人员在发现拼写错误或其他问题时向您的文档提出拉取请求。当然，如果您不想使用GitHub，也欢迎您在其他地方托管您的文档。 </p><p>使用前：<br>Linux或macOS - Windows可能有效，但不受支持。<br>Ruby，2.3.1或更新版本<br>Bundler - 如果已经安装了Ruby，但bundle命令不起作用，只需gem install bundler在终端中运行即可。</p><p>URL:<a href="https://spectrum.chat/slate?tab=posts" target="_blank" rel="noopener">https://spectrum.chat/slate?tab=posts</a><br>github: <a href="https://github.com/lord/slate" target="_blank" rel="noopener">https://github.com/lord/slate</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NPS</title>
      <link href="/2020/01/02/NPS/"/>
      <url>/2020/01/02/NPS/</url>
      
        <content type="html"><![CDATA[<p>净推荐(Net Promoter score)是Fred Reichheld（2003）针对企业良性收益与真实增长所提出的用户忠诚度概念。请用户回答“您在多大程度上愿意向您的朋友（亲人、同事……）推荐XX公司/产品？”（0-10分，10分表示非常愿意，0分表示非常不愿意），根据用户的推荐意愿，将用户分为三类：推荐者、被动者、贬损者，推荐者与贬损者是对企业实际的产品口碑有影响的用户，这两部分用户在用户总数中所占百分比之差，就是净推荐值（Net Promoter Score，NPS）。</p><p>推荐者（Promoter）：具有狂热忠诚度，铁杆粉丝，反复光顾，向朋友推荐。<br>被动者（Passives）：总体满意但不忠诚，容易转向竞争对手。<br>贬损者（Detractors）：使用不满意不忠诚，不断抱怨或投诉。<br>净推荐值(NPS)=(推荐者数/总样本数)×100%－(贬损者数/总样本数)×100%</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
